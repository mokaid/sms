swagger: '2.0'
info:
  title: Sample API
  version: '1.0.0'
  description: Example docs
tags:
  - name: users
    description: users API
  - name: Authentication
    description: Authentication API
# Define security schemes (API Key, JWT)
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-KEY
  BearerAuth:
    type: apiKey
    in: header
    name: Authorization
# Apply security globally (can also be applied per operation)
security:
  - ApiKeyAuth: []
  - BearerAuth: []
# Paths definition



paths:
  /signup:
    post:
      tags:
        - Authentication
      summary: "User signup"
      description: "This endpoint registers a new user."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "User data for signup"
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        "200":
          description: "User successfully registered"
          schema:
            $ref: '#/definitions/User'
        "409":
          description: "Email already exists or other conflict error"

  /login:
    post:
      tags:
        - Authentication
      summary: "User login"
      description: "This endpoint authenticates a user and returns a cookie."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "User credentials"
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        "200":
          description: "User successfully authenticated"
          schema:
            type: object
            properties:
              cookie:
                type: string
              findUser:
                $ref: '#/definitions/User'
        "409":
          description: "Authentication failed"

  /logout:
    post:
      tags:
        - Authentication
      summary: "User logout"
      description: "This endpoint logs out a user."
      parameters:
        - in: body
          name: body
          description: "User data for logout"
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        "200":
          description: "User successfully logged out"
          schema:
            $ref: '#/definitions/User'
        "409":
          description: "User not found"

  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


  /profiles:   
      post:
        tags:
          - Account Profiles
        summary: Add Account Profile
        parameters:
          - name: body
            in: body
            description: Account Profile Data
            required: true
            schema:
              $ref: '#/definitions/AccountProfile'
        responses:
          201:
            description: 'Created'
          400:
            description: 'Bad Request'
          409:
            description: 'Conflict'
          500:
            description: 'Server Error'


definitions:
  users:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  User:
    type: object
    properties:
      _id:
        type: string
      email:
        type: string
      password:
        type: string
      # Include additional properties your User model might have

  AccountProfile:  # New definition for AccountProfile (complete)
    type: object
    properties:
      profileDetails:
        type: object
        properties:
          legalName:
            type: string
            description: Client's legal name
          accountingReference:
            type: string
            description: Client's registration number
          address:
            type: string
            description: Client's address
          alertEmail:
            type: string
            description: Email for technical issues
          accountManager:
            type: string
            description: Account Manager from your side
          accountManagerEmail:
            type: string
            description: Account Manager email from client side
          ratingEmails:
            type: array
            items:
              type: string
            description: Emails for price rate sheet
          billingEmails:
            type: array
            items:
              type: string
            description: Emails for invoices
          supportEmail:
            type: string
            description: Email for client technical support
          dailyReportEmails:
            type: array
            items:
              type: string
            description: Emails for daily traffic reports
          classificationLevel:
            type: string
            description: Client classification level (A-B-C)
          phoneNumber:
            type: string
            description: Client's phone number
          timeZone:
            type: string
            description: Client's time zone
          applyTimeZoneToInvoice:
            type: boolean
            description: Apply time zone to invoice
          applyTimeZoneToDailyReport:
            type: boolean
            description: Apply time zone to daily report
          applyTimeZoneToRateNotification:
            type: boolean
            description: Apply time zone to rate notification
          currency:
            type: string
            enum:  # Assuming your Currency enum is defined elsewhere
              - EUR
              - USD
            description: Client's currency
          country:
            type: string
            description: Client's country
          website: 
            type: string
            description: Client's website URL
          logo: 
            type: string
            description: URL or path to client's logo
          vatRegistrationNumber: 
            type: string
            description: Client's VAT registration number 

      MO:
        type : object
        properties:
          credit:
            type: number
            description: The fixed credit limit for the client, stored as a positive value but interpreted as negative.
          creditLimit:
            type: number
            default: -1000
            description: The credit limit set for the client, represented as a negative number.
          alertFlexAmount:
            type: number
            description: The extra credit amount allowed once the credit limit is reached.
          alertPercentage1:
            type: number
            description: The first threshold percentage of the credit limit that triggers an alert.
          alertPercentage2:
            type: number
            description: The second threshold percentage of the credit limit that triggers an alert.
          alertPercentage3:
            type: number
            description: The third threshold percentage of the credit limit that triggers an alert.
          creditLimitActive:
            type: boolean
            default: false
            description: Indicates if the credit limit is actively enforced, automatically disabling/enabling profiles/accounts.
          tax:
            type: number
            default: 0
            description: The tax percentage applied to invoices sent to the client.            

      MT:
        type: object
        properties:
          mtCredit:
            type: number
            default: 0
            description: The initial credit for the client, increases with traffic sent to this client as a Vendor (MT).
          mtCreditLimit:
            type: number
            description: Fixed credit limit set for the client as Vendor (MT), should be a positive number.
          mtAlertPercentage1:
            type: number
            description: Percentage of the credit limit at which the first alert is triggered.
          mtAlertPercentage2:
            type: number
            description: Percentage of the credit limit at which the second alert is triggered.
          mtAlertPercentage3:
            type: number
            description: Percentage of the credit limit at which the third alert is triggered.
          tax:
            type: number
            default: 0
            description: Tax percentage, default is 0.

      Invoice:
        type: object
        properties:
          paymentTerm:
            type: string
            description: Time to wait to accept payment from the client.
          billingTerm:
            type: string
            default: "monthly"
            description: Frequency at which invoices will be generated, default is monthly.
          paymentType:
            type: string
            enum: [ "Prepaid", "Postpaid" ]
            description: Type of payment, whether it's Prepaid or Postpaid.
          invoiceTemplate:
            type: string
            enum: [ "EuroWithoutVAT", "EuroWithVAT", "USDWithoutVAT", "USDWithVAT", "Default" ]
            description: Template used for invoicing, options include templates for different currencies and tax configurations.

      Bank:
        type: object
        properties:
          bankName:
            type: string
            description: Name of the bank.
          bankAddress:
            type: string
            description: Address of the bank.
          IBAN:
            type: string
            description: International Bank Account Number.
          swiftCode:
            type: string
            description: SWIFT code for the bank.
          phoneNumber:
            type: string
            description: Phone number associated with the bank account.
          accountNumber:
            type: string
            description: Bank account number.

schemes:
 - https
 - http
